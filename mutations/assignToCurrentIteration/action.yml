name: move issue to sprint board
description: moves an issue to a sprintboard

inputs:
  PROJECT_NUMBER:
    description: 'Project Number'
  ITERATION_FIELD_NAME:
    description: the name of the iteration column
  OWNER:
    description: the owner of the project
  GITHUB_TOKEN:
    description: the github token with the approriate access
  NUMBER:
    description: the issue/pr number

runs:
  using: "composite"
  steps:
    - uses: actions/github-script@v6
      with:
        github-token: ${{ inputs.GITHUB_TOKEN }}
        script: |
          const getBoardQuery = `query(
            $issueNumber: Int!,
            $owner: String!,
            $iterationFieldName: String!,
            $repoName: String!,
            )
          {
            repository(
                name: $repoName
                owner: $owner
            ) {
                issueOrPullRequest(number: $issueNumber) {
                    ... on PullRequest {
                        projectItems(first: 10) {
                            totalCount
                            nodes {
                                databaseId
                                id
                                type
                                updatedAt
                                project {
                                    url
                                    id
                                    number
                                    field(name: $iterationFieldName) {
                                        ... on ProjectV2IterationField {
                                            id
                                            name
                                            configuration {
                                                iterations {
                                                    id
                                                    startDate
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    ... on Issue {
                        projectItems(first: 10) {
                            totalCount
                            nodes {
                                databaseId
                                id
                                type
                                updatedAt
                                project {
                                    url
                                    id
                                    number
                                    field(name: $iterationFieldName) {
                                        ... on ProjectV2IterationField {
                                            id
                                            name
                                            configuration {
                                                iterations {
                                                    id
                                                    startDate
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
          }
          `

          const { repository } = await github.graphql(getBoardQuery, {
            owner: '${{inputs.OWNER}}',
            repoName: context.repo.repo,
            issueNumber: parseInt('${{inputs.NUMBER}}'),
            iterationFieldName: '${{inputs.ITERATION_FIELD_NAME}}'
          })

          const projectItem = repository.issueOrPullRequest.projectItems.nodes.find(({project}) => project.number === parseInt(${{inputs.PROJECT_NUMBER}}))

          if (!projectItem) {
            core.info('Issue is not part of a board')
          }

          if(projectItem.project.field.configuration.iterations === 0) {
            core.error('No current Iteration')
          }

          const iterationId = projectItem.project.field.configuration.iterations[0].id

          const assignmentMutationQuery = `mutation($fieldId: ID!, $itemId: ID!, $projectId: ID!, $iterationId: String!) {
            updateProjectV2ItemFieldValue(
              input: {projectId: $projectId, itemId: $itemId, fieldId: $fieldId, value: {iterationId: $iterationId}}
            ) {
            clientMutationId
            }
          }`

          await github.graphql(assignmentMutationQuery,{
            fieldId: projectItem.project.field.id,
            itemId: projectItem.id,
            projectId: projectItem.project.id,
            iterationId,
          })
